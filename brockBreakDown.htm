<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>ブロック崩し</title>

<BODY background='gdataBrockBreakDown/bg_uchu_space.jpg' text="#f0f8ff">
<style>
body
{
	background-size: cover;
}
</style>

<style>
* { padding: 0; margin: 0; } //表示領域から境界線までの余白の幅と境界線からボックスまでの余白の幅を指定
canvas { background: #eee; display: block; margin: 0 auto; }
</style>

<canvas id="IdCanvas" width="1500" height="600"></canvas>

<script Language="JavaScript1.2">
<!--
	var canvas = document.getElementById("IdCanvas");
	var context = canvas.getContext("2d");

	var interval //setIntervalのIdを格納する変数
	
	var ballRadius = 5; //ボールの半径
	var ballNumber = 3; //ボールの数

	var ballOutLineRegister = new Array(ballNumber); //外に出てしまったボールのレジスタ
	var ballOutLineCount = 0;
	var gameOver = false;
	
	var ballX = new Array(ballNumber); //各ボールのx座標
	var ballY = new Array(ballNumber); //各ボールのy座標
	var ballDx = new Array(ballNumber); //各ボールのx座標移動幅
	var ballDy = new Array(ballNumber); //各ボールのy座標移動幅
	var ballDxPlus = new Array(ballNumber); //各ボールのx座標追加移動幅
	var ballDyPlus = new Array(ballNumber); //各ボールのy座標追加移動幅
	
	var paddleHeight = 10; //パドルの縦幅
	var paddleWidth = 160; //パドルの横幅
	var paddleNumber = 1; //パドルの数

	var paddleX = new Array(paddleNumber); //各パドルのx座標
	var paddleY = new Array(paddleNumber); //各パドルのy座標
	var paddleXPlus = new Array(paddleNumber); //各パドルの追加x座標
	var paddleYPlus = new Array(paddleNumber); //各パドルの追加y座標
	var rightPressed = new Array(paddleNumber); //各パドルの右移動の有無
	var leftPressed = new Array(paddleNumber); //各パドルの左移動の有無

	document.addEventListener("keydown", keyDown, false); //キーボードの押しを感知
	document.addEventListener("keyup", keyUp, false); //キーボードの離すを感知
	
	//同じ大きさのブロックを一つのまとまりとして扱う
	var brockRowNumber = 5; //ブロックを縦に並べる数
	var brockColumnNumber = 22; //ブロックを横に並べる数
	var brockWidth = 40; //ブロックの横幅
	var brockHeight = 10; //ブロックの縦幅
	var brockPadding = 25; //ブロックどうしの感覚
	var brockOffsetTop = 50; //ブロックの最上描画位置
	var brockOffsetLeft = 50; //ブロックの最左描画位置
	
	//それぞれのブロックのx座標とy座標を格納した配列を作成
	var brocks = [];
	var row,column;
	for(column=0; column<brockColumnNumber; column++)
	{
		brocks[column] = [];
		for(row=0; row<brockRowNumber; row++)
		{
			brocks[column][row] = { x:0, y:0, status:3 };
		}
	}
	
	var score = 0; //スコア
	
	var music = new Audio('gdataBrockBreakDown/energy.mp3');　//bgm
	
	//効果音
	var soundWall = new Audio('gdataBrockBreakDown/button01b.mp3');
	var soundBrockStatus3 = new Audio('gdataBrockBreakDown/select09.mp3');
	var soundBrockStatus2 = new Audio('gdataBrockBreakDown/select03.mp3');
	var soundBrockStatus1 = new Audio('gdataBrockBreakDown/select08.mp3');
	var soundPaddle = new Audio('gdataBrockBreakDown/powerup01.mp3');
	
	function gameStart(form) //ゲームの進行全体
	{
		music.loop = true;
		music.play();
		
		setObject(); //オブジェクトの初期設定を行う
		
		draw();
		//interval = setInterval(draw, 10); //10ミリ秒おきに描写
	}
	
	//表示系
	function draw() //ゲーム画面の表示
	{
		//前フレームの削除
		context.clearRect(0, 0, canvas.width, canvas.height);
		
		//フレーム内にオブジェクトを表示
		drawLine(); //ラインの表示
		drawBall(); //ボールを表示
		drawPaddle(); //パドルの表示
		drawBrock(); //ブロックの表示
		drawScore(); //スコアの表示
		
		//オブジェクトの情報を更新
		resetBallCoordinate();
		resetPaddleCoordinate();
		resetBrockCoordinate();
		
		requestAnimationFrame(draw); //ブラウザに描画の繰り返しを委託
	}
	//表示系の詳細
	function drawBall() //ボールの表示
	{
		var i;
		
		for(i=0; i<ballNumber; i++)
		{
			context.beginPath();
			context.arc(ballX[i], ballY[i], ballRadius, 0, Math.PI*2, false); //円(x座標,y座標,半径,描画開始角度(ラジアン表記),描画終了角度(ラジアン表記),描く方向(false:時計回り、true:反時計回り));
			context.fillStyle = "#ffd700"; //色指定          //四角形rect(x座標,y座標,幅,高さ);
			context.fill(); //指定した色で塗りつぶす
			context.strokeStyle = "#ffa500"; //縁の色指定
			context.lineWidth = 2;//指定した色で縁を塗りつぶす
			context.stroke();
			context.closePath();
		}
	}
	function drawPaddle() //パドルの表示
	{
		var i;

		for(i=0; i<paddleNumber; i++)
		{
			context.beginPath();
			context.rect(paddleX[i], paddleY[i], paddleWidth, paddleHeight);
			context.fillStyle = "#ffd700";
			context.fill();
			context.strokeStyle = "#ffa500";
			context.lineWith = 2;
			context.stroke();
			context.closePath();
		}
	}
	function drawBrock() //ブロックの表示
	{
		var i, j, brockX, brockY;
		
		for(i=0; i<brockColumnNumber; i++)
		{
			for(j=0; j<brockRowNumber; j++)
			{
				if(brocks[i][j].status > 0)
				{
					brockX = (i * (brockWidth + brockPadding )) + brockOffsetLeft;
					brockY = (j * (brockHeight + brockPadding )) + brockOffsetTop;
					
					brocks[i][j].x = brockX;
					brocks[i][j].y = brockY;
					
					context.beginPath();
					context.rect(brockX, brockY, brockWidth, brockHeight);
					if(brocks[i][j].status == 3)
					{
						context.fillStyle = "#00bfff";
						context.fill();
						context.strokeStyle = "#1e90ff";
						context.lineWith = 2;
						context.stroke();
					}
					else if(brocks[i][j].status == 2)
					{
						context.fillStyle = "#da70d6";
						context.fill();
						context.strokeStyle = "#ba55d3";
						context.lineWith = 2;
						context.stroke();
					}
					else
					{
						context.fillStyle = "#ff6347";
						context.fill();
						context.strokeStyle = "#dc1431";
						context.lineWith = 2;
						context.stroke();
					}
					context.closePath();
				}
			}
		}
	}
	function drawScore() //スコアの表示
	{
		context.font = "16px Arial";
		context.fillStyle = "#f0f8ff";
		context.fillText(" スコア : " + score, 8, 20); //テキストfillText("テキスト", x座標, y座標);
	}
	function drawLine() //ラインの表示
	{
		context.beginPath();
		context.rect(0, canvas.height - 2 , canvas.width, 2);
		context.fillStyle = "rgba(" + [70, 130, 180, 0.3] + ")";
		context.fill();
		context.closePath();
		
		context.beginPath();
		context.rect(canvas.width - 2, 0, 2, canvas.height);
		context.fillStyle = "rgba(" + [70, 130, 180, 0.3] + ")";
		context.fill();
		context.closePath();
		
	}

	//初期設定系
	function setObject() //オブジェクトの初期設定
	{
		//ボールの初期設定
		setBallCoordinate();
		setBallOutLineRegister();
		setBallSpeed();
		
		//パドルの初期設定
		setPaddleCoordinate();
		setPaddleKeybord();
	}
	//初期設定系の詳細
	function setBallCoordinate() //ボールの座標初期設定
	{
		ballX[0] = Math.floor(Math.random() * (canvas.width - ballRadius));
		ballY[0] = ballRadius; //Math.floor(Math.random() * (canvas.hright - ballRadius));
		
		ballX[1] = Math.floor(Math.random() * (canvas.width - ballRadius));
		ballY[1] = ballRadius + 200; //Math.floor(Math.random() * (canvas.hright - ballRadius));
		
		ballX[2] = Math.floor(Math.random() * (canvas.width - ballRadius));
		ballY[2] = ballRadius + 300; //Math.floor(Math.random() * (canvas.hright - ballRadius);
	}
	function setBallOutLineRegister() //ボールが外に出てしまったかの判断
	{
		for(i=0; i<ballNumber; i++) //全てのキーが
		{
			ballOutLineRegister[i] = false;
		}
	}
	function setPaddleCoordinate() //パドルの座標初期設定
	{
		paddleX[0] = (canvas.width - paddleWidth) / 2;
		paddleY[0] = canvas.height - paddleHeight;
		
		var i;
		
		for(i=0; i<paddleNumber; i++)
		{
			paddleXPlus[i] = 1;
			paddleYPlus[i] = 1;
		}
	}
	function setPaddleKeybord() //キーボードの状態初期設定
	{	
		for(i=0; i<ballNumber; i++) //全てのキーが
		{
			rightPressed[i] = false;
			leftPressed[i] = false;
		}
	}
	function setBallSpeed() //ボールのスピード設定
	{
		ballDx[0] = 1;
		ballDy[0] = 2;
		ballDx[1] = 2;
		ballDy[1] = 2;
		ballDx[2] = 2;
		ballDy[2] = 1;

		var i;
		
		for(i=0; i<ballNumber; i++)
		{
			ballDxPlus[i] = 1;
			ballDyPlus[i] = 1;
		}
	}

	//更新系の詳細
	function resetBallCoordinate()
	{
		var i;
		
		for(i=0; i<ballNumber; i++)
		{
			if((ballX[i] + ballDx[i] < ballRadius) || (ballX[i] + ballDx[i] > canvas.width - ballRadius)) //左右辺ガード
			{
				ballDx[i] *= -1;
			}
			if(ballY[i] + ballDy[i] < ballRadius) //上辺ガード
			{
				ballDy[i] *= -1;
			}
			if(ballY[i] + ballDy[i] > canvas.height - ballRadius)
			{
				if(((ballX[i] > paddleX[0]) && (ballX[i] < paddleX[0] + paddleWidth)) && (ballY[i] > paddleY[0] - ballRadius)) //下辺パドルガード
				{
					ballDy[i] *= -1;
					ballDxPlus[i] += 0.2;
					ballDxPlus[i] += 0.2;
					paddleXPlus[0] += 0.2;
					
				}
				else if(ballY[i] + ballDy[i] > canvas.height + ballRadius) //ガード通過時
				{
					ballOutLineRegister[i] = true;
				}
			}
		}
		
		checkBallOutLineRegister();
				
		if(gameOver == true)
		{
			music.pause();
			music.currenTime = 0;
			document.location.reload(); //現在のページを再読み込みする
			alert("Your are game over!\nあなたのスコア :" + score);
			//clearInterval(interval); //繰り返しを止める
		}
		else
		{
			for(i=0; i<ballNumber; i++)
			{
				//ボールの座標更新
				if(ballOutLineRegister[i] == false)
				{
					ballX[i] = ballX[i] + ballDx[i] * ballDxPlus[i];
					ballY[i] = ballY[i] + ballDy[i] * ballDyPlus[i];
				}
				else
				{
					ballX[i] = canvas.width*2;
					ballY[i] = canvas.height*2;
				}
			}
		}
	}
	function checkBallOutLineRegister() //ゲームオーバーかどうかの確認
	{
		ballOutLineCount = 0;
		
		for(j=0; j<ballNumber; j++)
		{
			if(ballOutLineRegister[j] == true)
			{
				ballOutLineCount++;
			}
		}
		if(ballOutLineCount == ballNumber)
		{
			gameOver = true;
		}
	}
	function keyDown(e) //キーが押された時の反応関数(eは押されたキーのキーコード)
	{
		if((e.key == "Right")||(e.key == "ArrowRight")) //RightキーかArrowRightキーが押されてた時
		{
			rightPressed[0] = true;
		}
		else if((e.key == "Left")||(e.key == "ArrowLeft")) //LeftキーかArrowLeftキーが押されてた時
		{
			leftPressed[0] = true;
		}
	}
	function keyUp(e) //キーが離された時の反応関数
	{
		if((e.key == "Right")||(e.key == "ArrowRight")) //RightキーかArrowRightキーが離された時
		{
			rightPressed[0] = false;
		}
		else if((e.key == "Left")||(e.key == "ArrowLeft")) //LeftキーかArrowLeftキーが離された時
		{
			leftPressed[0] = false;
		}
	}
	function resetPaddleCoordinate() //パドルの移動
	{
		var i;
		
		for(i=0; i<paddleNumber; i++)
		{
			if((rightPressed[i])&&(paddleX[i] < canvas.width - paddleWidth))
			{
				paddleX[i] += 20; //*paddleXPlus[i]; 当たるたびにパドル加速
			}
			if((leftPressed[i])&&(paddleX[i] > 0))
			{
				paddleX[i] -= 20; //*paddleXPlus[i];
			}
		}
	}
	function resetBrockCoordinate()
	{
		var i, j, k, checkBrock;
		
		for(i=0; i<brockColumnNumber; i++)
		{
			for(j=0; j<brockRowNumber; j++)
			{
				checkBrock = brocks[i][j]; //当たり判定をするブロックを選定

				if(brocks[i][j].status > 0)
				{
					for(k=0; k<ballNumber; k++)
					{
						if(((ballX[k] > checkBrock.x - ballRadius)&&(ballX[k] < checkBrock.x + brockWidth + ballRadius))&&((ballY[k] > checkBrock.y - ballRadius)&&(ballY[k] < checkBrock.y + brockHeight + ballRadius)))
						{
							if((ballX[k] - ballRadius > checkBrock.x - ballRadius)&&(ballX[k] + ballRadius < checkBrock.x + brockWidth + ballRadius))
							{
								ballDy[k] *= -1;
								
								if(checkBrock.status == 1)
								{
									checkBrock.status = 0;
									score += 3;
								}
								else if(checkBrock.status == 2)
								{
									checkBrock.status = 1;
									score += 2;
								}
								else if(checkBrock.status == 3)
								{
									checkBrock.status = 2;
									score += 1;
								}
								gameClearRegister();
							}
							else if((ballY[k] - ballRadius > checkBrock.y - ballRadius)&&(ballY[k] + ballRadius < checkBrock.y + brockHeight + ballRadius))
							{
								ballDx[k] *= -1;

								if(checkBrock.status == 1)
								{
									checkBrock.status = 0;
									score += 3;
								}
								else if(checkBrock.status == 2)
								{
									checkBrock.status = 1;
									score += 2;
								}
								else if(checkBrock.status == 3)
								{
									checkBrock.status = 2;
									score += 1;
								}
								gameClearRegister();
							}
							else
							{
								ballDy[k] *= -1;
								ballDx[k] *= -1;
								
								if(checkBrock.status == 1)
								{
									checkBrock.status = 0;
									score += 3;
								}
								else if(checkBrock.status == 2)
								{
									checkBrock.status = 1;
									score += 2;
								}
								else if(checkBrock.status == 3)
								{
									checkBrock.status = 2;
									score += 1;
								}
								gameClearRegister();
							}
						}
					}
				}
			}
		}
	}
	function gameClearRegister() //ゲームクリアかどうかの確認
	{
		var i, j;
		clearBrocks = 0;
		
		for(i=0; i<brockColumnNumber; i++)
		{
			for(j=0; j<brockRowNumber; j++)
			{
				if(brocks[i][j].status == 0)
				{
					clearBrocks++;
				}
			}
		}
		if(clearBrocks == brockColumnNumber * brockRowNumber)
		{
			alert("You are game clear!");
			document.location.reload();
		}
	}
// -->
</script>

<body>
<form NAME ="NameInput">
<h2 style = "text-align:center">
ブロック崩し
<br>
《ルール》
<br>
パドルを動かしてボールを弾ませて、ブロックにぶつけよう！
<br>
ボールが全て下のラインより下に出ていてしまったらゲームオーバー！
<br>
《操作方法》
<br>
パドルを右に動かす：『 RightKey 』または『 ArrowRightKey 』を押す。
<br>
パドルを左に動かす：『 LeftKey 』または『 ArrowLeftKey 』を押す。
<br>
《得点》
<br>
青色のブロックにぶつけると1点。　紫色のブロックにぶつけると2点。　赤色のブロックにぶつけると3点。
<br>
<input type="button" id= "IdStart" name="NameStart" value="GameStart" onClick="gameStart(this.form)">
</h2>
</form>
</body>

</head>
</html>